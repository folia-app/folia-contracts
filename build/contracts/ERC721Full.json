{
  "contractName": "ERC721Full",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"name()\":{\"details\":\"Gets the token name\",\"return\":\"string representing the token name\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"owner address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"implement supportsInterface(bytes4) using a lookup table\"},\"symbol()\":{\"details\":\"Gets the token symbol\",\"return\":\"string representing the token symbol\"},\"tokenByIndex(uint256)\":{\"details\":\"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the tokens list\"},\"return\":\"uint256 token ID at the given index of the tokens list\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Gets the token ID at a given index of the tokens list of the requested owner\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the requested tokens list\",\"owner\":\"address owning the tokens list to be accessed\"},\"return\":\"uint256 token ID at the given index of the tokens list owned by the requested address\"},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query\"}},\"totalSupply()\":{\"details\":\"Gets the total amount of tokens stored by the contract\",\"return\":\"uint256 representing the total amount of tokens\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}},\"title\":\"Full ERC721 Token This implementation includes all the required and some optional functionality of the ERC721 standard Moreover, it includes approve all functionality using operator terminology\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\":\"ERC721Full\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":2000000},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0x9da23588f58d0fa67097984e151bdaa6aa69c5e192bae17b44a90b0cfc194736\",\"urls\":[\"bzzr://261f787ff391c9079937a4623cc79ff8e31aac23112115b04ef241ee23f30524\"]},\"openzeppelin-solidity/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xbbb6159006ae3639daea09f7d63987816d6cf3a99f52af919363e025d3abf3b8\",\"urls\":[\"bzzr://8368cc15cc427ce17e8f398860826b6332992cb23048b25f541dbc2a5f0df5d4\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzzr://41ca38f6b0fa4b77b0feec43e422cfbec48b7eb38a41edf0b85c77e8d9a296b1\"]},\"openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x0546fa662082b36ac9cbd418c0722a3c52718b9dc3fe3e284081d73f48036228\",\"urls\":[\"bzzr://7a3a06efd002d9f7ef33f5c5242c9748edd9f71e7520394c001b5f025402ea6b\"]},\"openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\":{\"keccak256\":\"0x6c1899ddf6ca192150b58ce0ad2a890d981282a3ec2620700fa1c9a381b79ba0\",\"urls\":[\"bzzr://6385f6b3a0c6154a5b50096d5f3f807362f26a19de286db6c4c27b4376bdb461\"]},\"openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\":{\"keccak256\":\"0x21b8368e133ed2ee80f5feb602ff6bad7e3b9110b1ae90ea0faabf9c00527224\",\"urls\":[\"bzzr://d1798bccb7993688c28e6777dc07be2be7b52660345c6802ba90e328f237eeff\"]},\"openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\":{\"keccak256\":\"0xb8deb41bb234969070dc362c144191f2781178c33cf6b434fd68aa3692834105\",\"urls\":[\"bzzr://877c949aaaecced4bc9438439a4b6137c61dd07d146aa45ac8aff46fe94fde0d\"]},\"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x1f059ee943273719130df645fa38069b792988e8b732585528d5b1265f5aa046\",\"urls\":[\"bzzr://5ca0242354a69ad26d8baa954cb650a56ed1f9c62bb32474a785c8327a77abfc\"]},\"openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x1cded69b7f4e17fe634fecbf2bf43320beb11a95ba924c3665a11fc8f47dffc4\",\"urls\":[\"bzzr://3989f73208f7e09a764cfd6f5f45f9677cfba6a2697342452035db6a8131298c\"]},\"openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xa0bb72e035727b0631aac6380e899ad48511073a3d67f1da528f845d4a3121fb\",\"urls\":[\"bzzr://de6b2ae1ee80c0768c2bbd75d9fab510775b675691dff33abff8694d4a12fdab\"]},\"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x5e7281dbd14cf07af0974ce830c6242062cd430b70658878d49b5f5c1e2ec0aa\",\"urls\":[\"bzzr://f3677e2b02a3224666e176b0fbb4096564c0548a6d08517d4e19b6a29d604d98\"]},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"keccak256\":\"0x5c731061b804fa256fc8c05150eafe5d20b6bb94541a8f187912bf84f7033f34\",\"urls\":[\"bzzr://63fc4af0d7a99a770925b96a6cf48f25fc00d30274266f82db05f30baa238267\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200152838038062001528833981018060405260408110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b505092919060200180516401000000008111156200009c57600080fd5b82016020810184811115620000b057600080fd5b8151640100000000811182820187101715620000cb57600080fd5b509093508492508391506200010b90507f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b6200013f7f80ac58cd00000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b620001737f780e9d6300000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b8151620001889060099060208501906200024a565b5080516200019e90600a9060208401906200024a565b50620001d37f5b5e139f00000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b50505050620002ef565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200020d57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028d57805160ff1916838001178555620002bd565b82800160010185558215620002bd579182015b82811115620002bd578251825591602001919060010190620002a0565b50620002cb929150620002cf565b5090565b620002ec91905b80821115620002cb5760008155600101620002d6565b90565b61122980620002ff6000396000f3fe6080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100ea57806306fdde031461014a578063081812fc146101d4578063095ea7b31461022757806318160ddd1461026f57806323b872dd146102965780632f745c59146102e657806342842e0e1461032c5780634f6ccce71461037c5780636352211e146103a657806370a08231146103d057806395d89b4114610410578063a22cb46514610425578063b88d4fde1461046d578063c87b56dd1461054d578063e985e9c514610577575b600080fd5b3480156100f657600080fd5b506101366004803603602081101561010d57600080fd5b50357fffffffff00000000000000000000000000000000000000000000000000000000166105bf565b604080519115158252519081900360200190f35b34801561015657600080fd5b5061015f6105f6565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610199578181015183820152602001610181565b50505050905090810190601f1680156101c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e057600080fd5b506101fe600480360360208110156101f757600080fd5b50356106ab565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561023357600080fd5b5061026d6004803603604081101561024a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356106ea565b005b34801561027b57600080fd5b506102846107d2565b60408051918252519081900360200190f35b3480156102a257600080fd5b5061026d600480360360608110156102b957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356107d8565b3480156102f257600080fd5b506102846004803603604081101561030957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107fd565b34801561033857600080fd5b5061026d6004803603606081101561034f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610857565b34801561038857600080fd5b506102846004803603602081101561039f57600080fd5b5035610873565b3480156103b257600080fd5b506101fe600480360360208110156103c957600080fd5b50356108a8565b3480156103dc57600080fd5b50610284600480360360208110156103f357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108df565b34801561041c57600080fd5b5061015f61092c565b34801561043157600080fd5b5061026d6004803603604081101561044857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156109ab565b34801561047957600080fd5b5061026d6004803603608081101561049057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013590911691604082013591908101906080810160608201356401000000008111156104d857600080fd5b8201836020820111156104ea57600080fd5b8035906020019184600183028401116401000000008311171561050c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a67945050505050565b34801561055957600080fd5b5061015f6004803603602081101561057057600080fd5b5035610a8f565b34801561058357600080fd5b506101366004803603604081101561059a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610b62565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526020819052604090205460ff1690565b60098054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106a05780601f10610675576101008083540402835291602001916106a0565b820191906000526020600020905b81548152906001019060200180831161068357829003601f168201915b505050505090505b90565b60006106b682610b9d565b15156106c157600080fd5b5060009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006106f5826108a8565b905073ffffffffffffffffffffffffffffffffffffffff838116908216141561071d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff8216148061074657506107468133610b62565b151561075157600080fd5b60008281526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075490565b6107e23382610bc7565b15156107ed57600080fd5b6107f8838383610c5a565b505050565b6000610808836108df565b821061081357600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040902080548390811061084457fe5b9060005260206000200154905092915050565b6107f88383836020604051908101604052806000815250610a67565b600061087d6107d2565b821061088857600080fd5b600780548390811061089657fe5b90600052602060002001549050919050565b60008181526001602052604081205473ffffffffffffffffffffffffffffffffffffffff168015156108d957600080fd5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8216151561090357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b600a8054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106a05780601f10610675576101008083540402835291602001916106a0565b73ffffffffffffffffffffffffffffffffffffffff82163314156109ce57600080fd5b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610a728484846107d8565b610a7e84848484610c79565b1515610a8957600080fd5b50505050565b6060610a9a82610b9d565b1515610aa557600080fd5b6000828152600b602090815260409182902080548351601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018616150201909316929092049182018490048402810184019094528084529091830182828015610b565780601f10610b2b57610100808354040283529160200191610b56565b820191906000526020600020905b815481529060010190602001808311610b3957829003601f168201915b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260046020908152604080832093909416825291909152205460ff1690565b60009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b600080610bd3836108a8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610c4257508373ffffffffffffffffffffffffffffffffffffffff16610c2a846106ab565b73ffffffffffffffffffffffffffffffffffffffff16145b80610c525750610c528185610b62565b949350505050565b610c65838383610e12565b610c6f8382610f87565b6107f882826110dd565b6000610c9a8473ffffffffffffffffffffffffffffffffffffffff16611128565b1515610ca857506001610c52565b6040517f150b7a02000000000000000000000000000000000000000000000000000000008152336004820181815273ffffffffffffffffffffffffffffffffffffffff888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610d48578181015183820152602001610d30565b50505050905090810190601f168015610d755780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610d9757600080fd5b505af1158015610dab573d6000803e3d6000fd5b505050506040513d6020811015610dc157600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16610e32826108a8565b73ffffffffffffffffffffffffffffffffffffffff1614610e5257600080fd5b73ffffffffffffffffffffffffffffffffffffffff82161515610e7457600080fd5b610e7d81611130565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902054610eb490600163ffffffff61119216565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600360205260408082209390935590841681522054610ef790600163ffffffff6111a716565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600360209081526040808320959095558582526001905283812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016831790559251849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040812054610fbe90600163ffffffff61119216565b6000838152600660205260409020549091508082146110825773ffffffffffffffffffffffffffffffffffffffff8416600090815260056020526040812080548490811061100857fe5b9060005260206000200154905080600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561106257fe5b600091825260208083209091019290925591825260069052604090208190555b73ffffffffffffffffffffffffffffffffffffffff841660009081526005602052604090208054906110d6907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83016111c0565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526005602081815260408084208054868652600684529185208290559282526001810183559183529091200155565b6000903b1190565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff161561118f57600081815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b50565b6000828211156111a157600080fd5b50900390565b6000828201838110156111b957600080fd5b9392505050565b8154818355818111156107f8576000838152602090206107f89181019083016106a891905b808211156111f957600081556001016111e5565b509056fea165627a7a7230582084ff21afb767262087011468d0f3d6d487cc526c5c6b39da436188996a65b4370029",
  "deployedBytecode": "0x6080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100ea57806306fdde031461014a578063081812fc146101d4578063095ea7b31461022757806318160ddd1461026f57806323b872dd146102965780632f745c59146102e657806342842e0e1461032c5780634f6ccce71461037c5780636352211e146103a657806370a08231146103d057806395d89b4114610410578063a22cb46514610425578063b88d4fde1461046d578063c87b56dd1461054d578063e985e9c514610577575b600080fd5b3480156100f657600080fd5b506101366004803603602081101561010d57600080fd5b50357fffffffff00000000000000000000000000000000000000000000000000000000166105bf565b604080519115158252519081900360200190f35b34801561015657600080fd5b5061015f6105f6565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610199578181015183820152602001610181565b50505050905090810190601f1680156101c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e057600080fd5b506101fe600480360360208110156101f757600080fd5b50356106ab565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561023357600080fd5b5061026d6004803603604081101561024a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356106ea565b005b34801561027b57600080fd5b506102846107d2565b60408051918252519081900360200190f35b3480156102a257600080fd5b5061026d600480360360608110156102b957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356107d8565b3480156102f257600080fd5b506102846004803603604081101561030957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107fd565b34801561033857600080fd5b5061026d6004803603606081101561034f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610857565b34801561038857600080fd5b506102846004803603602081101561039f57600080fd5b5035610873565b3480156103b257600080fd5b506101fe600480360360208110156103c957600080fd5b50356108a8565b3480156103dc57600080fd5b50610284600480360360208110156103f357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108df565b34801561041c57600080fd5b5061015f61092c565b34801561043157600080fd5b5061026d6004803603604081101561044857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156109ab565b34801561047957600080fd5b5061026d6004803603608081101561049057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013590911691604082013591908101906080810160608201356401000000008111156104d857600080fd5b8201836020820111156104ea57600080fd5b8035906020019184600183028401116401000000008311171561050c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a67945050505050565b34801561055957600080fd5b5061015f6004803603602081101561057057600080fd5b5035610a8f565b34801561058357600080fd5b506101366004803603604081101561059a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610b62565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526020819052604090205460ff1690565b60098054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106a05780601f10610675576101008083540402835291602001916106a0565b820191906000526020600020905b81548152906001019060200180831161068357829003601f168201915b505050505090505b90565b60006106b682610b9d565b15156106c157600080fd5b5060009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006106f5826108a8565b905073ffffffffffffffffffffffffffffffffffffffff838116908216141561071d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff8216148061074657506107468133610b62565b151561075157600080fd5b60008281526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075490565b6107e23382610bc7565b15156107ed57600080fd5b6107f8838383610c5a565b505050565b6000610808836108df565b821061081357600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040902080548390811061084457fe5b9060005260206000200154905092915050565b6107f88383836020604051908101604052806000815250610a67565b600061087d6107d2565b821061088857600080fd5b600780548390811061089657fe5b90600052602060002001549050919050565b60008181526001602052604081205473ffffffffffffffffffffffffffffffffffffffff168015156108d957600080fd5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8216151561090357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b600a8054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106a05780601f10610675576101008083540402835291602001916106a0565b73ffffffffffffffffffffffffffffffffffffffff82163314156109ce57600080fd5b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610a728484846107d8565b610a7e84848484610c79565b1515610a8957600080fd5b50505050565b6060610a9a82610b9d565b1515610aa557600080fd5b6000828152600b602090815260409182902080548351601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018616150201909316929092049182018490048402810184019094528084529091830182828015610b565780601f10610b2b57610100808354040283529160200191610b56565b820191906000526020600020905b815481529060010190602001808311610b3957829003601f168201915b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260046020908152604080832093909416825291909152205460ff1690565b60009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b600080610bd3836108a8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610c4257508373ffffffffffffffffffffffffffffffffffffffff16610c2a846106ab565b73ffffffffffffffffffffffffffffffffffffffff16145b80610c525750610c528185610b62565b949350505050565b610c65838383610e12565b610c6f8382610f87565b6107f882826110dd565b6000610c9a8473ffffffffffffffffffffffffffffffffffffffff16611128565b1515610ca857506001610c52565b6040517f150b7a02000000000000000000000000000000000000000000000000000000008152336004820181815273ffffffffffffffffffffffffffffffffffffffff888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610d48578181015183820152602001610d30565b50505050905090810190601f168015610d755780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610d9757600080fd5b505af1158015610dab573d6000803e3d6000fd5b505050506040513d6020811015610dc157600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16610e32826108a8565b73ffffffffffffffffffffffffffffffffffffffff1614610e5257600080fd5b73ffffffffffffffffffffffffffffffffffffffff82161515610e7457600080fd5b610e7d81611130565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902054610eb490600163ffffffff61119216565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600360205260408082209390935590841681522054610ef790600163ffffffff6111a716565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600360209081526040808320959095558582526001905283812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016831790559251849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040812054610fbe90600163ffffffff61119216565b6000838152600660205260409020549091508082146110825773ffffffffffffffffffffffffffffffffffffffff8416600090815260056020526040812080548490811061100857fe5b9060005260206000200154905080600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561106257fe5b600091825260208083209091019290925591825260069052604090208190555b73ffffffffffffffffffffffffffffffffffffffff841660009081526005602052604090208054906110d6907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83016111c0565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526005602081815260408084208054868652600684529185208290559282526001810183559183529091200155565b6000903b1190565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff161561118f57600081815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b50565b6000828211156111a157600080fd5b50900390565b6000828201838110156111b957600080fd5b9392505050565b8154818355818111156107f8576000838152602090206107f89181019083016106a891905b808211156111f957600081556001016111e5565b509056fea165627a7a7230582084ff21afb767262087011468d0f3d6d487cc526c5c6b39da436188996a65b4370029",
  "sourceMap": "404:227:16:-;;;474:155;8:9:-1;5:2;;;30:1;27;20:12;5:2;474:155:16;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;474:155:16;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;474:155:16;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;-1:-1;474:155:16;;-1:-1:-1;551:4:16;;-1:-1:-1;474:155:16;;-1:-1:-1;640:40:9;;-1:-1:-1;659:20:9;640:18;;;;:40;:::i;:::-;1906::14;1925:20;1906:18;;;;:40;:::i;:::-;1240:51:15;1259:31;1240:18;;;;:51;:::i;:::-;738:12:17;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;760:16:17;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;864:49:17;883:29;864:18;;;;:49;:::i;:::-;666:254;;474:155:16;;404:227;;990:158:9;1065:25;;;;;;1057:34;;;;;;1101:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1101:40:9;1137:4;1101:40;;;990:158::o;404:227:16:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;404:227:16;;;-1:-1:-1;404:227:16;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "404:227:16:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;778:133:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;778:133:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;778:133:9;;;;;;;;;;;;;;;;;;;;;;;1024:83:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1024:83:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1024:83:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3705:151:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3705:151:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3705:151:14;;;;;;;;;;;;;;;;;;;;;;3128:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3128:292:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3128:292:14;;;;;;;;;;;;2005:94:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2005:94:15;;;;;;;;;;;;;;;;;;;;5260:180:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5260:180:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5260:180:14;;;;;;;;;;;;;;;;;;;1671:182:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1671:182:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1671:182:15;;;;;;;;;;6079:132:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6079:132:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6079:132:14;;;;;;;;;;;;;;;;;;;2436:148:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2436:148:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2436:148:15;;;2530:177:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2530:177:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2530:177:14;;;2156:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2156:150:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2156:150:14;;;;;1215:87:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1215:87:17;;;;4148:213:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4148:213:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4148:213:14;;;;;;;;;;;;6916:211;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6916:211:14;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;6916:211:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;6916:211:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6916:211:14;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6916:211:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;6916:211:14;;-1:-1:-1;6916:211:14;;-1:-1:-1;;;;;6916:211:14;1501:151:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1501:151:17;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1501:151:17;;;4682:145:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4682:145:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4682:145:14;;;;;;;;;;;;778:133:9;871:33;;848:4;871:33;;;;;;;;;;;;;;778:133::o;1024:83:17:-;1095:5;1088:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1063:13;;1088:12;;1095:5;;1088:12;;1095:5;1088:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1024:83;;:::o;3705:151:14:-;3764:7;3791:16;3799:7;3791;:16::i;:::-;3783:25;;;;;;;;-1:-1:-1;3825:24:14;;;;:15;:24;;;;;;;;;3705:151::o;3128:292::-;3191:13;3207:16;3215:7;3207;:16::i;:::-;3191:32;-1:-1:-1;3241:11:14;;;;;;;;;3233:20;;;;;;3271:10;:19;;;;;:58;;;3294:35;3311:5;3318:10;3294:16;:35::i;:::-;3263:67;;;;;;;;3341:24;;;;:15;:24;;;;;;:29;;;;;;;;;;;;;;3385:28;;3341:24;;3385:28;;;;;;;3128:292;;;:::o;2005:94:15:-;2075:10;:17;2005:94;:::o;5260:180:14:-;5350:39;5369:10;5381:7;5350:18;:39::i;:::-;5342:48;;;;;;;;5401:32;5415:4;5421:2;5425:7;5401:13;:32::i;:::-;5260:180;;;:::o;1671:182:15:-;1751:7;1786:16;1796:5;1786:9;:16::i;:::-;1778:24;;1770:33;;;;;;1820:19;;;;;;;:12;:19;;;;;:26;;1840:5;;1820:26;;;;;;;;;;;;;;1813:33;;1671:182;;;;:::o;6079:132:14:-;6165:39;6182:4;6188:2;6192:7;6165:39;;;;;;;;;;;;;:16;:39::i;2436:148:15:-;2494:7;2529:13;:11;:13::i;:::-;2521:21;;2513:30;;;;;;2560:10;:17;;2571:5;;2560:17;;;;;;;;;;;;;;2553:24;;2436:148;;;:::o;2530:177:14:-;2585:7;2620:20;;;:11;:20;;;;;;;;2658:19;;;2650:28;;;;;;2695:5;2530:177;-1:-1:-1;;2530:177:14:o;2156:150::-;2211:7;2238:19;;;;;2230:28;;;;;;-1:-1:-1;2275:24:14;;;;;;:17;:24;;;;;;;2156:150::o;1215:87:17:-;1288:7;1281:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1256:13;;1281:14;;1288:7;;1281:14;;1288:7;1281:14;;;;;;;;;;;;;;;;;;;;;;;;4148:213:14;4227:16;;;4233:10;4227:16;;4219:25;;;;;;4273:10;4254:30;;;;:18;:30;;;;;;;;;:34;;;;;;;;;;;;:45;;;;;;;;;;;;;4314:40;;;;;;;4254:34;;4273:10;4314:40;;;;;;;;;;;4148:213;;:::o;6916:211::-;7022:31;7035:4;7041:2;7045:7;7022:12;:31::i;:::-;7071:48;7094:4;7100:2;7104:7;7113:5;7071:22;:48::i;:::-;7063:57;;;;;;;;6916:211;;;;:::o;1501:151:17:-;1559:13;1592:16;1600:7;1592;:16::i;:::-;1584:25;;;;;;;;1626:19;;;;:10;:19;;;;;;;;;1619:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1626:19;;1619:26;;1626:19;1619:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1501:151;;;:::o;4682:145:14:-;4785:25;;;;4762:4;4785:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4682:145::o;7316:152::-;7373:4;7405:20;;;:11;:20;;;;;;;;7442:19;;;7316:152::o;7831:246::-;7916:4;7932:13;7948:16;7956:7;7948;:16::i;:::-;7932:32;;7993:5;7982:16;;:7;:16;;;:51;;;;8026:7;8002:31;;:20;8014:7;8002:11;:20::i;:::-;:31;;;7982:51;:87;;;;8037:32;8054:5;8061:7;8037:16;:32::i;:::-;7974:96;7831:246;-1:-1:-1;;;;7831:246:14:o;2958:239:15:-;3043:38;3063:4;3069:2;3073:7;3043:19;:38::i;:::-;3092:47;3125:4;3131:7;3092:32;:47::i;:::-;3150:40;3178:2;3182:7;3150:27;:40::i;10744:347:14:-;10865:4;10890:15;:2;:13;;;:15::i;:::-;10889:16;10885:58;;;-1:-1:-1;10928:4:14;10921:11;;10885:58;10969:70;;;;;11006:10;10969:70;;;;;;:36;:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;10953:13;;10969:36;;;;;;11006:10;;11018:4;;11024:7;;11033:5;;10969:70;;;;;;;;;;;10953:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10969:70:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10969:70:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10969:70:14;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10969:70:14;11057:26;;11067:16;11057:26;;-1:-1:-1;;10744:347:14;;;;;;:::o;9819:402::-;9932:4;9912:24;;:16;9920:7;9912;:16::i;:::-;:24;;;9904:33;;;;;;9955:16;;;;;9947:25;;;;;;9983:23;9998:7;9983:14;:23::i;:::-;10043;;;;;;;:17;:23;;;;;;:30;;10071:1;10043:30;:27;:30;:::i;:::-;10017:23;;;;;;;;:17;:23;;;;;;:56;;;;10107:21;;;;;;;:28;;10133:1;10107:28;:25;:28;:::i;:::-;10083:21;;;;;;;;:17;:21;;;;;;;;:52;;;;10146:20;;;:11;:20;;;;;:25;;;;;;;;10187:27;;10158:7;;10083:21;;10187:27;;;;;;9819:402;;;:::o;6060:1128:15:-;6347:18;;;6322:22;6347:18;;;:12;:18;;;;;:25;:32;;6377:1;6347:32;:29;:32;:::i;:::-;6389:18;6410:26;;;:17;:26;;;;;;6322:57;;-1:-1:-1;6540:28:15;;;6536:323;;6606:18;;;6584:19;6606:18;;;:12;:18;;;;;:34;;6625:14;;6606:34;;;;;;;;;;;;;;6584:56;;6688:11;6655:12;:18;6668:4;6655:18;;;;;;;;;;;;;;;6674:10;6655:30;;;;;;;;;;;;;;;;;;;;;:44;;;;6771:30;;;:17;:30;;;;;:43;;;6536:323;6945:18;;;;;;;:12;:18;;;;;:27;;;;;;;;;:::i;:::-;;6060:1128;;;;:::o;4906:183::-;5019:16;;;;;;;;:12;:16;;;;;;;;:23;;4990:26;;;:17;:26;;;;;:52;;;5052:16;;;39:1:-1;23:18;;45:23;;5052:30:15;;;;;;;;4906:183::o;463:616:22:-;523:4;1026:20;;1064:8;;463:616::o;11252:171:14:-;11351:1;11315:24;;;:15;:24;;;;;;:38;:24;:38;11311:106;;11404:1;11369:24;;;:15;:24;;;;;:37;;;;;;11311:106;11252:171;:::o;1205:145:11:-;1263:7;1290:6;;;;1282:15;;;;;;-1:-1:-1;1319:5:11;;;1205:145::o;1431:::-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;;1568:1;1431:145;-1:-1:-1;;;1431:145:11:o;404:227:16:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./ERC721.sol\";\nimport \"./ERC721Enumerable.sol\";\nimport \"./ERC721Metadata.sol\";\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n",
  "sourcePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol",
  "ast": {
    "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol",
    "exportedSymbols": {
      "ERC721Full": [
        4098
      ]
    },
    "id": 4099,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4076,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:16"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 4077,
        "nodeType": "ImportDirective",
        "scope": 4099,
        "sourceUnit": 3740,
        "src": "25:22:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol",
        "file": "./ERC721Enumerable.sol",
        "id": 4078,
        "nodeType": "ImportDirective",
        "scope": 4099,
        "sourceUnit": 4075,
        "src": "48:32:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol",
        "file": "./ERC721Metadata.sol",
        "id": 4079,
        "nodeType": "ImportDirective",
        "scope": 4099,
        "sourceUnit": 4226,
        "src": "81:30:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4080,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3739,
              "src": "427:6:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$3739",
                "typeString": "contract ERC721"
              }
            },
            "id": 4081,
            "nodeType": "InheritanceSpecifier",
            "src": "427:6:16"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4082,
              "name": "ERC721Enumerable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4074,
              "src": "435:16:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Enumerable_$4074",
                "typeString": "contract ERC721Enumerable"
              }
            },
            "id": 4083,
            "nodeType": "InheritanceSpecifier",
            "src": "435:16:16"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4084,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4225,
              "src": "453:14:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$4225",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 4085,
            "nodeType": "InheritanceSpecifier",
            "src": "453:14:16"
          }
        ],
        "contractDependencies": [
          2864,
          2874,
          3739,
          4074,
          4225,
          4328,
          4355,
          4378
        ],
        "contractKind": "contract",
        "documentation": "@title Full ERC721 Token\nThis implementation includes all the required and some optional functionality of the ERC721 standard\nMoreover, it includes approve all functionality using operator terminology\n@dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md",
        "fullyImplemented": true,
        "id": 4098,
        "linearizedBaseContracts": [
          4098,
          4225,
          4378,
          4074,
          4355,
          3739,
          4328,
          2864,
          2874
        ],
        "name": "ERC721Full",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 4096,
              "nodeType": "Block",
              "src": "565:64:16",
              "statements": []
            },
            "documentation": null,
            "id": 4097,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 4092,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4087,
                    "src": "551:4:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4093,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4089,
                    "src": "557:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 4094,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 4091,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4225,
                  "src": "536:14:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$4225_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "536:28:16"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4090,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4087,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 4097,
                  "src": "487:18:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4086,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "487:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4089,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 4097,
                  "src": "507:20:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4088,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "507:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "486:42:16"
            },
            "returnParameters": {
              "id": 4095,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "565:0:16"
            },
            "scope": 4098,
            "src": "474:155:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 4099,
        "src": "404:227:16"
      }
    ],
    "src": "0:632:16"
  },
  "legacyAST": {
    "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol",
    "exportedSymbols": {
      "ERC721Full": [
        4098
      ]
    },
    "id": 4099,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4076,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:16"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 4077,
        "nodeType": "ImportDirective",
        "scope": 4099,
        "sourceUnit": 3740,
        "src": "25:22:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol",
        "file": "./ERC721Enumerable.sol",
        "id": 4078,
        "nodeType": "ImportDirective",
        "scope": 4099,
        "sourceUnit": 4075,
        "src": "48:32:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol",
        "file": "./ERC721Metadata.sol",
        "id": 4079,
        "nodeType": "ImportDirective",
        "scope": 4099,
        "sourceUnit": 4226,
        "src": "81:30:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4080,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3739,
              "src": "427:6:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$3739",
                "typeString": "contract ERC721"
              }
            },
            "id": 4081,
            "nodeType": "InheritanceSpecifier",
            "src": "427:6:16"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4082,
              "name": "ERC721Enumerable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4074,
              "src": "435:16:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Enumerable_$4074",
                "typeString": "contract ERC721Enumerable"
              }
            },
            "id": 4083,
            "nodeType": "InheritanceSpecifier",
            "src": "435:16:16"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4084,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4225,
              "src": "453:14:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$4225",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 4085,
            "nodeType": "InheritanceSpecifier",
            "src": "453:14:16"
          }
        ],
        "contractDependencies": [
          2864,
          2874,
          3739,
          4074,
          4225,
          4328,
          4355,
          4378
        ],
        "contractKind": "contract",
        "documentation": "@title Full ERC721 Token\nThis implementation includes all the required and some optional functionality of the ERC721 standard\nMoreover, it includes approve all functionality using operator terminology\n@dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md",
        "fullyImplemented": true,
        "id": 4098,
        "linearizedBaseContracts": [
          4098,
          4225,
          4378,
          4074,
          4355,
          3739,
          4328,
          2864,
          2874
        ],
        "name": "ERC721Full",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 4096,
              "nodeType": "Block",
              "src": "565:64:16",
              "statements": []
            },
            "documentation": null,
            "id": 4097,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 4092,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4087,
                    "src": "551:4:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 4093,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4089,
                    "src": "557:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 4094,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 4091,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4225,
                  "src": "536:14:16",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$4225_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "536:28:16"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4090,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4087,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 4097,
                  "src": "487:18:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4086,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "487:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4089,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 4097,
                  "src": "507:20:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4088,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "507:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "486:42:16"
            },
            "returnParameters": {
              "id": 4095,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "565:0:16"
            },
            "scope": 4098,
            "src": "474:155:16",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 4099,
        "src": "404:227:16"
      }
    ],
    "src": "0:632:16"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.2",
  "updatedAt": "2021-05-30T20:54:47.198Z",
  "devdoc": {
    "details": "see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "name()": {
        "details": "Gets the token name",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "owner address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "return": "string representing the token symbol"
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "return": "uint256 token ID at the given index of the tokens list"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "return": "uint256 token ID at the given index of the tokens list owned by the requested address"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract",
        "return": "uint256 representing the total amount of tokens"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "Full ERC721 Token This implementation includes all the required and some optional functionality of the ERC721 standard Moreover, it includes approve all functionality using operator terminology"
  },
  "userdoc": {
    "methods": {}
  }
}