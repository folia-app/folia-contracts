{
  "contractName": "TestToken",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "recipient",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"name()\":{\"details\":\"Gets the token name\",\"return\":\"string representing the token name\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"owner address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"implement supportsInterface(bytes4) using a lookup table\"},\"symbol()\":{\"details\":\"Gets the token symbol\",\"return\":\"string representing the token symbol\"},\"tokenByIndex(uint256)\":{\"details\":\"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the tokens list\"},\"return\":\"uint256 token ID at the given index of the tokens list\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Gets the token ID at a given index of the tokens list of the requested owner\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the requested tokens list\",\"owner\":\"address owning the tokens list to be accessed\"},\"return\":\"uint256 token ID at the given index of the tokens list owned by the requested address\"},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query\"}},\"totalSupply()\":{\"details\":\"Gets the total amount of tokens stored by the contract\",\"return\":\"uint256 representing the total amount of tokens\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/TestToken.sol\":\"TestToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":2000000},\"remappings\":[]},\"sources\":{\"project:/contracts/Address.sol\":{\"keccak256\":\"0x5c731061b804fa256fc8c05150eafe5d20b6bb94541a8f187912bf84f7033f34\",\"urls\":[\"bzzr://63fc4af0d7a99a770925b96a6cf48f25fc00d30274266f82db05f30baa238267\"]},\"project:/contracts/ERC165.sol\":{\"keccak256\":\"0x9da23588f58d0fa67097984e151bdaa6aa69c5e192bae17b44a90b0cfc194736\",\"urls\":[\"bzzr://261f787ff391c9079937a4623cc79ff8e31aac23112115b04ef241ee23f30524\"]},\"project:/contracts/ERC721.sol\":{\"keccak256\":\"0x0e5ff1ed87ec5449a05dd178012d4dd7ef3c69dd6a0c338841da5da63f610c44\",\"urls\":[\"bzzr://952430ea9a214aa3f81c41c4a84b9aec703e6f268403710e7d26b1125b8f6ff2\"]},\"project:/contracts/ERC721Enumerable.sol\":{\"keccak256\":\"0x03ec60c88266498907830490aa2bf197e38f1485335f043ffead732d6f4ee432\",\"urls\":[\"bzzr://b030b62aac01543148f257af3d2e3b49042bab7ce492cb4ee719dbd3a49a054a\"]},\"project:/contracts/ERC721Full.sol\":{\"keccak256\":\"0x21b8368e133ed2ee80f5feb602ff6bad7e3b9110b1ae90ea0faabf9c00527224\",\"urls\":[\"bzzr://d1798bccb7993688c28e6777dc07be2be7b52660345c6802ba90e328f237eeff\"]},\"project:/contracts/ERC721Metadata.sol\":{\"keccak256\":\"0x6ad6b823fce56670f49f06c33feda91d27227127a836e6bb40d8c66028d7d474\",\"urls\":[\"bzzr://98a04f9b86344120d429e8a37b36037de29bf23e8488c3c93212500394973876\"]},\"project:/contracts/IERC165.sol\":{\"keccak256\":\"0xbbb6159006ae3639daea09f7d63987816d6cf3a99f52af919363e025d3abf3b8\",\"urls\":[\"bzzr://8368cc15cc427ce17e8f398860826b6332992cb23048b25f541dbc2a5f0df5d4\"]},\"project:/contracts/IERC721.sol\":{\"keccak256\":\"0x064332da394d7b92e2ccd3769d06934338d2da6311ca63b46fb037d44e6f55a7\",\"urls\":[\"bzzr://5774686d58fa8a33a56702cc63126fe80195bbd672331e39b8349712a07f773d\"]},\"project:/contracts/IERC721Enumerable.sol\":{\"keccak256\":\"0x1cded69b7f4e17fe634fecbf2bf43320beb11a95ba924c3665a11fc8f47dffc4\",\"urls\":[\"bzzr://3989f73208f7e09a764cfd6f5f45f9677cfba6a2697342452035db6a8131298c\"]},\"project:/contracts/IERC721Metadata.sol\":{\"keccak256\":\"0xa0bb72e035727b0631aac6380e899ad48511073a3d67f1da528f845d4a3121fb\",\"urls\":[\"bzzr://de6b2ae1ee80c0768c2bbd75d9fab510775b675691dff33abff8694d4a12fdab\"]},\"project:/contracts/IERC721Receiver.sol\":{\"keccak256\":\"0x5e7281dbd14cf07af0974ce830c6242062cd430b70658878d49b5f5c1e2ec0aa\",\"urls\":[\"bzzr://f3677e2b02a3224666e176b0fbb4096564c0548a6d08517d4e19b6a29d604d98\"]},\"project:/contracts/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzzr://41ca38f6b0fa4b77b0feec43e422cfbec48b7eb38a41edf0b85c77e8d9a296b1\"]},\"project:/contracts/TestToken.sol\":{\"keccak256\":\"0x9f68b95428e29003db1d2e2cdcb0081bf1c7611309115c99714ceec1d05e5a72\",\"urls\":[\"bzzr://97591ba8df949301959eb0dcacd04664c4fd3b9714b819bf53f74d5ece84ce63\"]}},\"version\":1}",
  "bytecode": "0x600560809081527f746f6b656e00000000000000000000000000000000000000000000000000000060a052610100604052600660c09081527f73796d626f6c000000000000000000000000000000000000000000000000000060e0528181620000917f01ffc9a70000000000000000000000000000000000000000000000000000000064010000000062000163810204565b620000c57f80ac58cd0000000000000000000000000000000000000000000000000000000064010000000062000163810204565b620000f97f780e9d630000000000000000000000000000000000000000000000000000000064010000000062000163810204565b81516200010e906009906020850190620001d0565b5080516200012490600a906020840190620001d0565b50620001597f5b5e139f0000000000000000000000000000000000000000000000000000000064010000000062000163810204565b5050505062000275565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200019357600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200021357805160ff191683800117855562000243565b8280016001018555821562000243579182015b828111156200024357825182559160200191906001019062000226565b506200025192915062000255565b5090565b6200027291905b808211156200025157600081556001016200025c565b90565b6113dc80620002856000396000f3fe6080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100f557806306fdde0314610155578063081812fc146101df578063095ea7b31461023257806318160ddd1461027a57806323b872dd146102a15780632f745c59146102f157806340c10f191461033757806342842e0e1461037d5780634f6ccce7146103cd5780636352211e146103f757806370a082311461042157806395d89b4114610461578063a22cb46514610476578063b88d4fde146104be578063c87b56dd1461059e578063e985e9c5146105c8575b600080fd5b34801561010157600080fd5b506101416004803603602081101561011857600080fd5b50357fffffffff0000000000000000000000000000000000000000000000000000000016610610565b604080519115158252519081900360200190f35b34801561016157600080fd5b5061016a610647565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a457818101518382015260200161018c565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101eb57600080fd5b506102096004803603602081101561020257600080fd5b50356106fc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561023e57600080fd5b506102786004803603604081101561025557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561073b565b005b34801561028657600080fd5b5061028f610823565b60408051918252519081900360200190f35b3480156102ad57600080fd5b50610278600480360360608110156102c457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610829565b3480156102fd57600080fd5b5061028f6004803603604081101561031457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561084e565b34801561034357600080fd5b506102786004803603604081101561035a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356108a8565b34801561038957600080fd5b50610278600480360360608110156103a057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356108b6565b3480156103d957600080fd5b5061028f600480360360208110156103f057600080fd5b50356108d2565b34801561040357600080fd5b506102096004803603602081101561041a57600080fd5b5035610907565b34801561042d57600080fd5b5061028f6004803603602081101561044457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661093e565b34801561046d57600080fd5b5061016a61098b565b34801561048257600080fd5b506102786004803603604081101561049957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610a0a565b3480156104ca57600080fd5b50610278600480360360808110156104e157600080fd5b73ffffffffffffffffffffffffffffffffffffffff82358116926020810135909116916040820135919081019060808101606082013564010000000081111561052957600080fd5b82018360208201111561053b57600080fd5b8035906020019184600183028401116401000000008311171561055d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ac6945050505050565b3480156105aa57600080fd5b5061016a600480360360208110156105c157600080fd5b5035610aee565b3480156105d457600080fd5b50610141600480360360408110156105eb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610bc1565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526020819052604090205460ff1690565b60098054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106f15780601f106106c6576101008083540402835291602001916106f1565b820191906000526020600020905b8154815290600101906020018083116106d457829003601f168201915b505050505090505b90565b600061070782610bfc565b151561071257600080fd5b5060009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600061074682610907565b905073ffffffffffffffffffffffffffffffffffffffff838116908216141561076e57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff8216148061079757506107978133610bc1565b15156107a257600080fd5b60008281526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075490565b6108333382610c26565b151561083e57600080fd5b610849838383610cb9565b505050565b60006108598361093e565b821061086457600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040902080548390811061089557fe5b9060005260206000200154905092915050565b6108b28282610cd8565b5050565b6108498383836020604051908101604052806000815250610ac6565b60006108dc610823565b82106108e757600080fd5b60078054839081106108f557fe5b90600052602060002001549050919050565b60008181526001602052604081205473ffffffffffffffffffffffffffffffffffffffff1680151561093857600080fd5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8216151561096257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b600a8054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106f15780601f106106c6576101008083540402835291602001916106f1565b73ffffffffffffffffffffffffffffffffffffffff8216331415610a2d57600080fd5b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610ad1848484610829565b610add84848484610cf5565b1515610ae857600080fd5b50505050565b6060610af982610bfc565b1515610b0457600080fd5b6000828152600b602090815260409182902080548351601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018616150201909316929092049182018490048402810184019094528084529091830182828015610bb55780601f10610b8a57610100808354040283529160200191610bb5565b820191906000526020600020905b815481529060010190602001808311610b9857829003601f168201915b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260046020908152604080832093909416825291909152205460ff1690565b60009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b600080610c3283610907565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610ca157508373ffffffffffffffffffffffffffffffffffffffff16610c89846106fc565b73ffffffffffffffffffffffffffffffffffffffff16145b80610cb15750610cb18185610bc1565b949350505050565b610cc4838383610e8e565b610cce8382611003565b6108498282611159565b610ce282826111a4565b610cec8282611159565b6108b281611297565b6000610d168473ffffffffffffffffffffffffffffffffffffffff166112db565b1515610d2457506001610cb1565b6040517f150b7a02000000000000000000000000000000000000000000000000000000008152336004820181815273ffffffffffffffffffffffffffffffffffffffff888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610dc4578181015183820152602001610dac565b50505050905090810190601f168015610df15780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610e1357600080fd5b505af1158015610e27573d6000803e3d6000fd5b505050506040513d6020811015610e3d57600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16610eae82610907565b73ffffffffffffffffffffffffffffffffffffffff1614610ece57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82161515610ef057600080fd5b610ef9816112e3565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902054610f3090600163ffffffff61134516565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600360205260408082209390935590841681522054610f7390600163ffffffff61135a16565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600360209081526040808320959095558582526001905283812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016831790559251849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081205461103a90600163ffffffff61134516565b6000838152600660205260409020549091508082146110fe5773ffffffffffffffffffffffffffffffffffffffff8416600090815260056020526040812080548490811061108457fe5b9060005260206000200154905080600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156110de57fe5b600091825260208083209091019290925591825260069052604090208190555b73ffffffffffffffffffffffffffffffffffffffff84166000908152600560205260409020805490611152907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301611373565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526005602081815260408084208054868652600684529185208290559282526001810183559183529091200155565b73ffffffffffffffffffffffffffffffffffffffff821615156111c657600080fd5b6111cf81610bfc565b156111d957600080fd5b600081815260016020818152604080842080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8816908117909155845260039091529091205461123f9161135a565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600360205260408082209390935591518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600780546000838152600860205260408120829055600182018355919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880155565b6000903b1190565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff161561134257600081815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b50565b60008282111561135457600080fd5b50900390565b60008282018381101561136c57600080fd5b9392505050565b815481835581811115610849576000838152602090206108499181019083016106f991905b808211156113ac5760008155600101611398565b509056fea165627a7a72305820e6ddd95248e43e164b8244e7328efa213b4be2d7d8acd78b97eb3e2953317d850029",
  "deployedBytecode": "0x6080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100f557806306fdde0314610155578063081812fc146101df578063095ea7b31461023257806318160ddd1461027a57806323b872dd146102a15780632f745c59146102f157806340c10f191461033757806342842e0e1461037d5780634f6ccce7146103cd5780636352211e146103f757806370a082311461042157806395d89b4114610461578063a22cb46514610476578063b88d4fde146104be578063c87b56dd1461059e578063e985e9c5146105c8575b600080fd5b34801561010157600080fd5b506101416004803603602081101561011857600080fd5b50357fffffffff0000000000000000000000000000000000000000000000000000000016610610565b604080519115158252519081900360200190f35b34801561016157600080fd5b5061016a610647565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a457818101518382015260200161018c565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101eb57600080fd5b506102096004803603602081101561020257600080fd5b50356106fc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561023e57600080fd5b506102786004803603604081101561025557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561073b565b005b34801561028657600080fd5b5061028f610823565b60408051918252519081900360200190f35b3480156102ad57600080fd5b50610278600480360360608110156102c457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610829565b3480156102fd57600080fd5b5061028f6004803603604081101561031457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561084e565b34801561034357600080fd5b506102786004803603604081101561035a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356108a8565b34801561038957600080fd5b50610278600480360360608110156103a057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356108b6565b3480156103d957600080fd5b5061028f600480360360208110156103f057600080fd5b50356108d2565b34801561040357600080fd5b506102096004803603602081101561041a57600080fd5b5035610907565b34801561042d57600080fd5b5061028f6004803603602081101561044457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661093e565b34801561046d57600080fd5b5061016a61098b565b34801561048257600080fd5b506102786004803603604081101561049957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610a0a565b3480156104ca57600080fd5b50610278600480360360808110156104e157600080fd5b73ffffffffffffffffffffffffffffffffffffffff82358116926020810135909116916040820135919081019060808101606082013564010000000081111561052957600080fd5b82018360208201111561053b57600080fd5b8035906020019184600183028401116401000000008311171561055d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ac6945050505050565b3480156105aa57600080fd5b5061016a600480360360208110156105c157600080fd5b5035610aee565b3480156105d457600080fd5b50610141600480360360408110156105eb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610bc1565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526020819052604090205460ff1690565b60098054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106f15780601f106106c6576101008083540402835291602001916106f1565b820191906000526020600020905b8154815290600101906020018083116106d457829003601f168201915b505050505090505b90565b600061070782610bfc565b151561071257600080fd5b5060009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600061074682610907565b905073ffffffffffffffffffffffffffffffffffffffff838116908216141561076e57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff8216148061079757506107978133610bc1565b15156107a257600080fd5b60008281526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075490565b6108333382610c26565b151561083e57600080fd5b610849838383610cb9565b505050565b60006108598361093e565b821061086457600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040902080548390811061089557fe5b9060005260206000200154905092915050565b6108b28282610cd8565b5050565b6108498383836020604051908101604052806000815250610ac6565b60006108dc610823565b82106108e757600080fd5b60078054839081106108f557fe5b90600052602060002001549050919050565b60008181526001602052604081205473ffffffffffffffffffffffffffffffffffffffff1680151561093857600080fd5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8216151561096257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b600a8054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106f15780601f106106c6576101008083540402835291602001916106f1565b73ffffffffffffffffffffffffffffffffffffffff8216331415610a2d57600080fd5b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610ad1848484610829565b610add84848484610cf5565b1515610ae857600080fd5b50505050565b6060610af982610bfc565b1515610b0457600080fd5b6000828152600b602090815260409182902080548351601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018616150201909316929092049182018490048402810184019094528084529091830182828015610bb55780601f10610b8a57610100808354040283529160200191610bb5565b820191906000526020600020905b815481529060010190602001808311610b9857829003601f168201915b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260046020908152604080832093909416825291909152205460ff1690565b60009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b600080610c3283610907565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610ca157508373ffffffffffffffffffffffffffffffffffffffff16610c89846106fc565b73ffffffffffffffffffffffffffffffffffffffff16145b80610cb15750610cb18185610bc1565b949350505050565b610cc4838383610e8e565b610cce8382611003565b6108498282611159565b610ce282826111a4565b610cec8282611159565b6108b281611297565b6000610d168473ffffffffffffffffffffffffffffffffffffffff166112db565b1515610d2457506001610cb1565b6040517f150b7a02000000000000000000000000000000000000000000000000000000008152336004820181815273ffffffffffffffffffffffffffffffffffffffff888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610dc4578181015183820152602001610dac565b50505050905090810190601f168015610df15780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610e1357600080fd5b505af1158015610e27573d6000803e3d6000fd5b505050506040513d6020811015610e3d57600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16610eae82610907565b73ffffffffffffffffffffffffffffffffffffffff1614610ece57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82161515610ef057600080fd5b610ef9816112e3565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902054610f3090600163ffffffff61134516565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600360205260408082209390935590841681522054610f7390600163ffffffff61135a16565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600360209081526040808320959095558582526001905283812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016831790559251849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081205461103a90600163ffffffff61134516565b6000838152600660205260409020549091508082146110fe5773ffffffffffffffffffffffffffffffffffffffff8416600090815260056020526040812080548490811061108457fe5b9060005260206000200154905080600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156110de57fe5b600091825260208083209091019290925591825260069052604090208190555b73ffffffffffffffffffffffffffffffffffffffff84166000908152600560205260409020805490611152907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301611373565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526005602081815260408084208054868652600684529185208290559282526001810183559183529091200155565b73ffffffffffffffffffffffffffffffffffffffff821615156111c657600080fd5b6111cf81610bfc565b156111d957600080fd5b600081815260016020818152604080842080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8816908117909155845260039091529091205461123f9161135a565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600360205260408082209390935591518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600780546000838152600860205260408120829055600182018355919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880155565b6000903b1190565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff161561134257600081815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b50565b60008282111561135457600080fd5b50900390565b60008282018381101561136c57600080fd5b9392505050565b815481835581811115610849576000838152602090206108499181019083016106f991905b808211156113ac5760008155600101611398565b509056fea165627a7a72305820e6ddd95248e43e164b8244e7328efa213b4be2d7d8acd78b97eb3e2953317d850029",
  "sourceMap": "474:155:16:-;53:161:45;474:155:16;;;;;;;53:161:45;474:155:16;;;;;;;;;53:161:45;474:155:16;640:40:11;659:20;640:18;;;;:40;:::i;:::-;1869::14;1888:20;1869:18;;;;:40;:::i;:::-;1222:51:15;1241:31;1222:18;;;;:51;:::i;:::-;720:12:17;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;742:16:17;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;846:49:17;865:29;846:18;;;;:49;:::i;:::-;648:254;;474:155:16;;53:161:45;;990:158:11;1065:25;;;;;;1057:34;;;;;;1101:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1101:40:11;1137:4;1101:40;;;990:158::o;53:161:45:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;53:161:45;;;-1:-1:-1;53:161:45;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "53:161:45:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;778:133:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;778:133:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;778:133:11;;;;;;;;;;;;;;;;;;;;;;;1006:83:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1006:83:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1006:83:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3668:151:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3668:151:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3668:151:14;;;;;;;;;;;;;;;;;;;;;;3091:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3091:292:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3091:292:14;;;;;;;;;;;;1987:94:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1987:94:15;;;;;;;;;;;;;;;;;;;;5223:180:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5223:180:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5223:180:14;;;;;;;;;;;;;;;;;;;1653:182:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1653:182:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1653:182:15;;;;;;;;;;111:101:45;;8:9:-1;5:2;;;30:1;27;20:12;5:2;111:101:45;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;111:101:45;;;;;;;;;;6042:132:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6042:132:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6042:132:14;;;;;;;;;;;;;;;;;;;2418:148:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2418:148:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2418:148:15;;;2493:177:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2493:177:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2493:177:14;;;2119:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2119:150:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2119:150:14;;;;;1197:87:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1197:87:17;;;;4111:213:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4111:213:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4111:213:14;;;;;;;;;;;;6879:211;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6879:211:14;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;6879:211:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;6879:211:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6879:211:14;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6879:211:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;6879:211:14;;-1:-1:-1;6879:211:14;;-1:-1:-1;;;;;6879:211:14;1483:151:17;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1483:151:17;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1483:151:17;;;4645:145:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4645:145:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4645:145:14;;;;;;;;;;;;778:133:11;871:33;;848:4;871:33;;;;;;;;;;;;;;778:133::o;1006:83:17:-;1077:5;1070:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1045:13;;1070:12;;1077:5;;1070:12;;1077:5;1070:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1006:83;;:::o;3668:151:14:-;3727:7;3754:16;3762:7;3754;:16::i;:::-;3746:25;;;;;;;;-1:-1:-1;3788:24:14;;;;:15;:24;;;;;;;;;3668:151::o;3091:292::-;3154:13;3170:16;3178:7;3170;:16::i;:::-;3154:32;-1:-1:-1;3204:11:14;;;;;;;;;3196:20;;;;;;3234:10;:19;;;;;:58;;;3257:35;3274:5;3281:10;3257:16;:35::i;:::-;3226:67;;;;;;;;3304:24;;;;:15;:24;;;;;;:29;;;;;;;;;;;;;;3348:28;;3304:24;;3348:28;;;;;;;3091:292;;;:::o;1987:94:15:-;2057:10;:17;1987:94;:::o;5223:180:14:-;5313:39;5332:10;5344:7;5313:18;:39::i;:::-;5305:48;;;;;;;;5364:32;5378:4;5384:2;5388:7;5364:13;:32::i;:::-;5223:180;;;:::o;1653:182:15:-;1733:7;1768:16;1778:5;1768:9;:16::i;:::-;1760:24;;1752:33;;;;;;1802:19;;;;;;;:12;:19;;;;;:26;;1822:5;;1802:26;;;;;;;;;;;;;;1795:33;;1653:182;;;;:::o;111:101:45:-;180:25;186:9;197:7;180:5;:25::i;:::-;111:101;;:::o;6042:132:14:-;6128:39;6145:4;6151:2;6155:7;6128:39;;;;;;;;;;;;;:16;:39::i;2418:148:15:-;2476:7;2511:13;:11;:13::i;:::-;2503:21;;2495:30;;;;;;2542:10;:17;;2553:5;;2542:17;;;;;;;;;;;;;;2535:24;;2418:148;;;:::o;2493:177:14:-;2548:7;2583:20;;;:11;:20;;;;;;;;2621:19;;;2613:28;;;;;;2658:5;2493:177;-1:-1:-1;;2493:177:14:o;2119:150::-;2174:7;2201:19;;;;;2193:28;;;;;;-1:-1:-1;2238:24:14;;;;;;:17;:24;;;;;;;2119:150::o;1197:87:17:-;1270:7;1263:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1238:13;;1263:14;;1270:7;;1263:14;;1270:7;1263:14;;;;;;;;;;;;;;;;;;;;;;;;4111:213:14;4190:16;;;4196:10;4190:16;;4182:25;;;;;;4236:10;4217:30;;;;:18;:30;;;;;;;;;:34;;;;;;;;;;;;:45;;;;;;;;;;;;;4277:40;;;;;;;4217:34;;4236:10;4277:40;;;;;;;;;;;4111:213;;:::o;6879:211::-;6985:31;6998:4;7004:2;7008:7;6985:12;:31::i;:::-;7034:48;7057:4;7063:2;7067:7;7076:5;7034:22;:48::i;:::-;7026:57;;;;;;;;6879:211;;;;:::o;1483:151:17:-;1541:13;1574:16;1582:7;1574;:16::i;:::-;1566:25;;;;;;;;1608:19;;;;:10;:19;;;;;;;;;1601:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1608:19;;1601:26;;1608:19;1601:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1483:151;;;:::o;4645:145:14:-;4748:25;;;;4725:4;4748:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4645:145::o;7279:152::-;7336:4;7368:20;;;:11;:20;;;;;;;;7405:19;;;7279:152::o;7794:246::-;7879:4;7895:13;7911:16;7919:7;7911;:16::i;:::-;7895:32;;7956:5;7945:16;;:7;:16;;;:51;;;;7989:7;7965:31;;:20;7977:7;7965:11;:20::i;:::-;:31;;;7945:51;:87;;;;8000:32;8017:5;8024:7;8000:16;:32::i;:::-;7937:96;7794:246;-1:-1:-1;;;;7794:246:14:o;2940:239:15:-;3025:38;3045:4;3051:2;3055:7;3025:19;:38::i;:::-;3074:47;3107:4;3113:7;3074:32;:47::i;:::-;3132:40;3160:2;3164:7;3132:27;:40::i;3434:196::-;3497:24;3509:2;3513:7;3497:11;:24::i;:::-;3532:40;3560:2;3564:7;3532:27;:40::i;:::-;3583;3615:7;3583:31;:40::i;10707:347:14:-;10828:4;10853:15;:2;:13;;;:15::i;:::-;10852:16;10848:58;;;-1:-1:-1;10891:4:14;10884:11;;10848:58;10932:70;;;;;10969:10;10932:70;;;;;;:36;:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;10916:13;;10932:36;;;;;;10969:10;;10981:4;;10987:7;;10996:5;;10932:70;;;;;;;;;;;10916:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10932:70:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10932:70:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10932:70:14;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10932:70:14;11020:26;;11030:16;11020:26;;-1:-1:-1;;10707:347:14;;;;;;:::o;9782:402::-;9895:4;9875:24;;:16;9883:7;9875;:16::i;:::-;:24;;;9867:33;;;;;;9918:16;;;;;9910:25;;;;;;9946:23;9961:7;9946:14;:23::i;:::-;10006;;;;;;;:17;:23;;;;;;:30;;10034:1;10006:30;:27;:30;:::i;:::-;9980:23;;;;;;;;:17;:23;;;;;;:56;;;;10070:21;;;;;;;:28;;10096:1;10070:28;:25;:28;:::i;:::-;10046:21;;;;;;;;:17;:21;;;;;;;;:52;;;;10109:20;;;:11;:20;;;;;:25;;;;;;;;10150:27;;10121:7;;10046:21;;10150:27;;;;;;9782:402;;;:::o;6042:1128:15:-;6329:18;;;6304:22;6329:18;;;:12;:18;;;;;:25;:32;;6359:1;6329:32;:29;:32;:::i;:::-;6371:18;6392:26;;;:17;:26;;;;;;6304:57;;-1:-1:-1;6522:28:15;;;6518:323;;6588:18;;;6566:19;6588:18;;;:12;:18;;;;;:34;;6607:14;;6588:34;;;;;;;;;;;;;;6566:56;;6670:11;6637:12;:18;6650:4;6637:18;;;;;;;;;;;;;;;6656:10;6637:30;;;;;;;;;;;;;;;;;;;;;:44;;;;6753:30;;;:17;:30;;;;;:43;;;6518:323;6927:18;;;;;;;:12;:18;;;;;:27;;;;;;;;;:::i;:::-;;6042:1128;;;;:::o;4888:183::-;5001:16;;;;;;;;:12;:16;;;;;;;;:23;;4972:26;;;:17;:26;;;;;:52;;;5034:16;;;39:1:-1;23:18;;45:23;;5034:30:15;;;;;;;;4888:183::o;8283:278:14:-;8354:16;;;;;8346:25;;;;;;8390:16;8398:7;8390;:16::i;:::-;8389:17;8381:26;;;;;;8418:20;;;;:11;:20;;;;;;;;:25;;;;;;;;;;;;;8477:21;;:17;:21;;;;;;;:28;;:25;:28::i;:::-;8453:21;;;;;;;:17;:21;;;;;;:52;;;;8521:33;;8546:7;;8453:21;8521:33;;8453:21;;8521:33;8283:278;;:::o;5266:161:15:-;5369:10;:17;;5342:24;;;;:15;:24;;;;;:44;;;39:1:-1;23:18;;45:23;;5396:24:15;;;;;;;5266:161::o;463:616:5:-;523:4;1026:20;;1064:8;;463:616::o;11215:171:14:-;11314:1;11278:24;;;:15;:24;;;;;;:38;:24;:38;11274:106;;11367:1;11332:24;;;:15;:24;;;;;:37;;;;;;11274:106;11215:171;:::o;1205:145:37:-;1263:7;1290:6;;;;1282:15;;;;;;-1:-1:-1;1319:5:37;;;1205:145::o;1431:::-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;;1568:1;1431:145;-1:-1:-1;;;1431:145:37:o;53:161:45:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./ERC721Full.sol\";\n\ncontract TestToken is ERC721Full(\"token\", \"symbol\") {\n    function mint(address recipient, uint256 tokenId) external {\n        _mint(recipient, tokenId);\n    }\n}",
  "sourcePath": "/Users/billy/GitHub/folia-app/folia-contracts/contracts/TestToken.sol",
  "ast": {
    "absolutePath": "project:/contracts/TestToken.sol",
    "exportedSymbols": {
      "TestToken": [
        7811
      ]
    },
    "id": 7812,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7792,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:45"
      },
      {
        "absolutePath": "project:/contracts/ERC721Full.sol",
        "file": "./ERC721Full.sol",
        "id": 7793,
        "nodeType": "ImportDirective",
        "scope": 7812,
        "sourceUnit": 3641,
        "src": "25:26:45",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": [
              {
                "argumentTypes": null,
                "hexValue": "746f6b656e",
                "id": 7795,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "86:7:45",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_9b9b0454cadcb5884dd3faa6ba975da4d2459aa3f11d31291a25a8358f84946d",
                  "typeString": "literal_string \"token\""
                },
                "value": "token"
              },
              {
                "argumentTypes": null,
                "hexValue": "73796d626f6c",
                "id": 7796,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "95:8:45",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_be16b05c387bab9ac31918a3e61672f4618601f3c598a2f3f2710f37053e1ea4",
                  "typeString": "literal_string \"symbol\""
                },
                "value": "symbol"
              }
            ],
            "baseName": {
              "contractScope": null,
              "id": 7794,
              "name": "ERC721Full",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3640,
              "src": "75:10:45",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Full_$3640",
                "typeString": "contract ERC721Full"
              }
            },
            "id": 7797,
            "nodeType": "InheritanceSpecifier",
            "src": "75:29:45"
          }
        ],
        "contractDependencies": [
          2232,
          3281,
          3616,
          3640,
          3767,
          5333,
          5505,
          5532,
          5555
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 7811,
        "linearizedBaseContracts": [
          7811,
          3640,
          3767,
          5555,
          3616,
          5532,
          3281,
          5505,
          2232,
          5333
        ],
        "name": "TestToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 7809,
              "nodeType": "Block",
              "src": "170:42:45",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 7805,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7799,
                        "src": "186:9:45",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 7806,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7801,
                        "src": "197:7:45",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 7804,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3423
                      ],
                      "referencedDeclaration": 3423,
                      "src": "180:5:45",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 7807,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "180:25:45",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7808,
                  "nodeType": "ExpressionStatement",
                  "src": "180:25:45"
                }
              ]
            },
            "documentation": null,
            "id": 7810,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7802,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7799,
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 7810,
                  "src": "125:17:45",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7798,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "125:7:45",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7801,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 7810,
                  "src": "144:15:45",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7800,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "144:7:45",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "124:36:45"
            },
            "returnParameters": {
              "id": 7803,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "170:0:45"
            },
            "scope": 7811,
            "src": "111:101:45",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 7812,
        "src": "53:161:45"
      }
    ],
    "src": "0:214:45"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/TestToken.sol",
      "exportedSymbols": {
        "TestToken": [
          7811
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".0"
          ]
        },
        "id": 7792,
        "name": "PragmaDirective",
        "src": "0:23:45"
      },
      {
        "attributes": {
          "SourceUnit": 3641,
          "absolutePath": "project:/contracts/ERC721Full.sol",
          "file": "./ERC721Full.sol",
          "scope": 7812,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7793,
        "name": "ImportDirective",
        "src": "25:26:45"
      },
      {
        "attributes": {
          "contractDependencies": [
            2232,
            3281,
            3616,
            3640,
            3767,
            5333,
            5505,
            5532,
            5555
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            7811,
            3640,
            3767,
            5555,
            3616,
            5532,
            3281,
            5505,
            2232,
            5333
          ],
          "name": "TestToken",
          "scope": 7812
        },
        "children": [
          {
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "ERC721Full",
                  "referencedDeclaration": 3640,
                  "type": "contract ERC721Full"
                },
                "id": 7794,
                "name": "UserDefinedTypeName",
                "src": "75:10:45"
              },
              {
                "attributes": {
                  "argumentTypes": null,
                  "hexvalue": "746f6b656e",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "subdenomination": null,
                  "token": "string",
                  "type": "literal_string \"token\"",
                  "value": "token"
                },
                "id": 7795,
                "name": "Literal",
                "src": "86:7:45"
              },
              {
                "attributes": {
                  "argumentTypes": null,
                  "hexvalue": "73796d626f6c",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "subdenomination": null,
                  "token": "string",
                  "type": "literal_string \"symbol\"",
                  "value": "symbol"
                },
                "id": 7796,
                "name": "Literal",
                "src": "95:8:45"
              }
            ],
            "id": 7797,
            "name": "InheritanceSpecifier",
            "src": "75:29:45"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "mint",
              "scope": 7811,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "recipient",
                      "scope": 7810,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 7798,
                        "name": "ElementaryTypeName",
                        "src": "125:7:45"
                      }
                    ],
                    "id": 7799,
                    "name": "VariableDeclaration",
                    "src": "125:17:45"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "tokenId",
                      "scope": 7810,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7800,
                        "name": "ElementaryTypeName",
                        "src": "144:7:45"
                      }
                    ],
                    "id": 7801,
                    "name": "VariableDeclaration",
                    "src": "144:15:45"
                  }
                ],
                "id": 7802,
                "name": "ParameterList",
                "src": "124:36:45"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 7803,
                "name": "ParameterList",
                "src": "170:0:45"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "overloadedDeclarations": [
                                3423
                              ],
                              "referencedDeclaration": 3423,
                              "type": "function (address,uint256)",
                              "value": "_mint"
                            },
                            "id": 7804,
                            "name": "Identifier",
                            "src": "180:5:45"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7799,
                              "type": "address",
                              "value": "recipient"
                            },
                            "id": 7805,
                            "name": "Identifier",
                            "src": "186:9:45"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7801,
                              "type": "uint256",
                              "value": "tokenId"
                            },
                            "id": 7806,
                            "name": "Identifier",
                            "src": "197:7:45"
                          }
                        ],
                        "id": 7807,
                        "name": "FunctionCall",
                        "src": "180:25:45"
                      }
                    ],
                    "id": 7808,
                    "name": "ExpressionStatement",
                    "src": "180:25:45"
                  }
                ],
                "id": 7809,
                "name": "Block",
                "src": "170:42:45"
              }
            ],
            "id": 7810,
            "name": "FunctionDefinition",
            "src": "111:101:45"
          }
        ],
        "id": 7811,
        "name": "ContractDefinition",
        "src": "53:161:45"
      }
    ],
    "id": 7812,
    "name": "SourceUnit",
    "src": "0:214:45"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-09-06T12:49:38.913Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "name()": {
        "details": "Gets the token name",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "owner address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "return": "string representing the token symbol"
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "return": "uint256 token ID at the given index of the tokens list"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "return": "uint256 token ID at the given index of the tokens list owned by the requested address"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract",
        "return": "uint256 representing the total amount of tokens"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}