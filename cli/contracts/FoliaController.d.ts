/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FoliaControllerInterface extends ethers.utils.Interface {
  functions: {
    "adminWallet()": FunctionFragment;
    "folia()": FunctionFragment;
    "latestWorkId()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "works(uint256)": FunctionFragment;
    "adminSplit()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "addArtwork(address,uint256,uint256,bool)": FunctionFragment;
    "updateArtworkPaused(uint256,bool)": FunctionFragment;
    "updateArtworkEditions(uint256,uint256)": FunctionFragment;
    "updateArtworkPrice(uint256,uint256)": FunctionFragment;
    "updateArtworkArtist(uint256,address)": FunctionFragment;
    "buy(address,uint256)": FunctionFragment;
    "updateAdminSplit(uint256)": FunctionFragment;
    "updateAdminWallet(address)": FunctionFragment;
    "updatePaused(bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adminWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "folia", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "latestWorkId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "works", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "adminSplit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addArtwork",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateArtworkPaused",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateArtworkEditions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateArtworkPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateArtworkArtist",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdminSplit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdminWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaused",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "folia", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestWorkId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "works", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminSplit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addArtwork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateArtworkPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateArtworkEditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateArtworkPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateArtworkArtist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAdminSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdminWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaused",
    data: BytesLike
  ): Result;

  events: {
    "newWork(uint256,address,uint256,uint256,bool)": EventFragment;
    "updatedWork(uint256,address,uint256,uint256,bool)": EventFragment;
    "editionBought(uint256,uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "newWork"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "updatedWork"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "editionBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class FoliaController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FoliaControllerInterface;

  functions: {
    adminWallet(overrides?: CallOverrides): Promise<[string]>;

    "adminWallet()"(overrides?: CallOverrides): Promise<[string]>;

    folia(overrides?: CallOverrides): Promise<[string]>;

    "folia()"(overrides?: CallOverrides): Promise<[string]>;

    latestWorkId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "latestWorkId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * @returns the address of the owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * @returns the address of the owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    works(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, string] & {
        exists: boolean;
        paused: boolean;
        editions: BigNumber;
        printed: BigNumber;
        price: BigNumber;
        artist: string;
      }
    >;

    "works(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, string] & {
        exists: boolean;
        paused: boolean;
        editions: BigNumber;
        printed: BigNumber;
        price: BigNumber;
        artist: string;
      }
    >;

    adminSplit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "adminSplit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addArtwork(
      artist: string,
      editions: BigNumberish,
      price: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addArtwork(address,uint256,uint256,bool)"(
      artist: string,
      editions: BigNumberish,
      price: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateArtworkPaused(
      workId: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateArtworkPaused(uint256,bool)"(
      workId: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateArtworkEditions(
      workId: BigNumberish,
      _editions: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateArtworkEditions(uint256,uint256)"(
      workId: BigNumberish,
      _editions: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateArtworkPrice(
      workId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateArtworkPrice(uint256,uint256)"(
      workId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateArtworkArtist(
      workId: BigNumberish,
      _artist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateArtworkArtist(uint256,address)"(
      workId: BigNumberish,
      _artist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buy(
      recipient: string,
      workId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buy(address,uint256)"(
      recipient: string,
      workId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    updateAdminSplit(
      _adminSplit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAdminSplit(uint256)"(
      _adminSplit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAdminWallet(
      _adminWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAdminWallet(address)"(
      _adminWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePaused(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePaused(bool)"(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  adminWallet(overrides?: CallOverrides): Promise<string>;

  "adminWallet()"(overrides?: CallOverrides): Promise<string>;

  folia(overrides?: CallOverrides): Promise<string>;

  "folia()"(overrides?: CallOverrides): Promise<string>;

  latestWorkId(overrides?: CallOverrides): Promise<BigNumber>;

  "latestWorkId()"(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Allows the current owner to relinquish control of the contract.
   * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Allows the current owner to relinquish control of the contract.
   * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * @returns the address of the owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * @returns the address of the owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * @returns true if `msg.sender` is the owner of the contract.
   */
  isOwner(overrides?: CallOverrides): Promise<boolean>;

  /**
   * @returns true if `msg.sender` is the owner of the contract.
   */
  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  works(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, BigNumber, string] & {
      exists: boolean;
      paused: boolean;
      editions: BigNumber;
      printed: BigNumber;
      price: BigNumber;
      artist: string;
    }
  >;

  "works(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, BigNumber, string] & {
      exists: boolean;
      paused: boolean;
      editions: BigNumber;
      printed: BigNumber;
      price: BigNumber;
      artist: string;
    }
  >;

  adminSplit(overrides?: CallOverrides): Promise<BigNumber>;

  "adminSplit()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addArtwork(
    artist: string,
    editions: BigNumberish,
    price: BigNumberish,
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addArtwork(address,uint256,uint256,bool)"(
    artist: string,
    editions: BigNumberish,
    price: BigNumberish,
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateArtworkPaused(
    workId: BigNumberish,
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateArtworkPaused(uint256,bool)"(
    workId: BigNumberish,
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateArtworkEditions(
    workId: BigNumberish,
    _editions: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateArtworkEditions(uint256,uint256)"(
    workId: BigNumberish,
    _editions: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateArtworkPrice(
    workId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateArtworkPrice(uint256,uint256)"(
    workId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateArtworkArtist(
    workId: BigNumberish,
    _artist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateArtworkArtist(uint256,address)"(
    workId: BigNumberish,
    _artist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buy(
    recipient: string,
    workId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buy(address,uint256)"(
    recipient: string,
    workId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  updateAdminSplit(
    _adminSplit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAdminSplit(uint256)"(
    _adminSplit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAdminWallet(
    _adminWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAdminWallet(address)"(
    _adminWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePaused(
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePaused(bool)"(
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    adminWallet(overrides?: CallOverrides): Promise<string>;

    "adminWallet()"(overrides?: CallOverrides): Promise<string>;

    folia(overrides?: CallOverrides): Promise<string>;

    "folia()"(overrides?: CallOverrides): Promise<string>;

    latestWorkId(overrides?: CallOverrides): Promise<BigNumber>;

    "latestWorkId()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * @returns the address of the owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * @returns the address of the owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    isOwner(overrides?: CallOverrides): Promise<boolean>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    works(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, string] & {
        exists: boolean;
        paused: boolean;
        editions: BigNumber;
        printed: BigNumber;
        price: BigNumber;
        artist: string;
      }
    >;

    "works(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, string] & {
        exists: boolean;
        paused: boolean;
        editions: BigNumber;
        printed: BigNumber;
        price: BigNumber;
        artist: string;
      }
    >;

    adminSplit(overrides?: CallOverrides): Promise<BigNumber>;

    "adminSplit()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addArtwork(
      artist: string,
      editions: BigNumberish,
      price: BigNumberish,
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addArtwork(address,uint256,uint256,bool)"(
      artist: string,
      editions: BigNumberish,
      price: BigNumberish,
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateArtworkPaused(
      workId: BigNumberish,
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateArtworkPaused(uint256,bool)"(
      workId: BigNumberish,
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateArtworkEditions(
      workId: BigNumberish,
      _editions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateArtworkEditions(uint256,uint256)"(
      workId: BigNumberish,
      _editions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateArtworkPrice(
      workId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateArtworkPrice(uint256,uint256)"(
      workId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateArtworkArtist(
      workId: BigNumberish,
      _artist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateArtworkArtist(uint256,address)"(
      workId: BigNumberish,
      _artist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      recipient: string,
      workId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "buy(address,uint256)"(
      recipient: string,
      workId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAdminSplit(
      _adminSplit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAdminSplit(uint256)"(
      _adminSplit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdminWallet(
      _adminWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAdminWallet(address)"(
      _adminWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePaused(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    "updatePaused(bool)"(
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    newWork(
      workId: null,
      artist: null,
      editions: null,
      price: null,
      paused: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, boolean],
      {
        workId: BigNumber;
        artist: string;
        editions: BigNumber;
        price: BigNumber;
        paused: boolean;
      }
    >;

    updatedWork(
      workId: null,
      artist: null,
      editions: null,
      price: null,
      paused: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, boolean],
      {
        workId: BigNumber;
        artist: string;
        editions: BigNumber;
        price: BigNumber;
        paused: boolean;
      }
    >;

    editionBought(
      workId: null,
      editionId: null,
      tokenId: null,
      recipient: null,
      paid: null,
      artistReceived: null,
      adminReceived: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        workId: BigNumber;
        editionId: BigNumber;
        tokenId: BigNumber;
        recipient: string;
        paid: BigNumber;
        artistReceived: BigNumber;
        adminReceived: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    adminWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "adminWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    folia(overrides?: CallOverrides): Promise<BigNumber>;

    "folia()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestWorkId(overrides?: CallOverrides): Promise<BigNumber>;

    "latestWorkId()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * @returns the address of the owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @returns the address of the owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    works(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "works(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adminSplit(overrides?: CallOverrides): Promise<BigNumber>;

    "adminSplit()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addArtwork(
      artist: string,
      editions: BigNumberish,
      price: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addArtwork(address,uint256,uint256,bool)"(
      artist: string,
      editions: BigNumberish,
      price: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateArtworkPaused(
      workId: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateArtworkPaused(uint256,bool)"(
      workId: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateArtworkEditions(
      workId: BigNumberish,
      _editions: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateArtworkEditions(uint256,uint256)"(
      workId: BigNumberish,
      _editions: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateArtworkPrice(
      workId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateArtworkPrice(uint256,uint256)"(
      workId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateArtworkArtist(
      workId: BigNumberish,
      _artist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateArtworkArtist(uint256,address)"(
      workId: BigNumberish,
      _artist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buy(
      recipient: string,
      workId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buy(address,uint256)"(
      recipient: string,
      workId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    updateAdminSplit(
      _adminSplit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAdminSplit(uint256)"(
      _adminSplit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAdminWallet(
      _adminWallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAdminWallet(address)"(
      _adminWallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePaused(_paused: boolean, overrides?: Overrides): Promise<BigNumber>;

    "updatePaused(bool)"(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "adminWallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    folia(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "folia()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestWorkId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "latestWorkId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * @returns the address of the owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @returns the address of the owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    works(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "works(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminSplit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "adminSplit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addArtwork(
      artist: string,
      editions: BigNumberish,
      price: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addArtwork(address,uint256,uint256,bool)"(
      artist: string,
      editions: BigNumberish,
      price: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateArtworkPaused(
      workId: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateArtworkPaused(uint256,bool)"(
      workId: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateArtworkEditions(
      workId: BigNumberish,
      _editions: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateArtworkEditions(uint256,uint256)"(
      workId: BigNumberish,
      _editions: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateArtworkPrice(
      workId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateArtworkPrice(uint256,uint256)"(
      workId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateArtworkArtist(
      workId: BigNumberish,
      _artist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateArtworkArtist(uint256,address)"(
      workId: BigNumberish,
      _artist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buy(
      recipient: string,
      workId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buy(address,uint256)"(
      recipient: string,
      workId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    updateAdminSplit(
      _adminSplit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAdminSplit(uint256)"(
      _adminSplit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAdminWallet(
      _adminWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAdminWallet(address)"(
      _adminWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePaused(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePaused(bool)"(
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
