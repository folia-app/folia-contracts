/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Metadata } from "../Metadata";

export class Metadata__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Metadata> {
    return super.deploy(overrides || {}) as Promise<Metadata>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Metadata {
    return super.attach(address) as Metadata;
  }
  connect(signer: Signer): Metadata__factory {
    return super.connect(signer) as Metadata__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Metadata {
    return new Contract(address, _abi, signerOrProvider) as Metadata;
  }
}

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        name: "_infoUrl",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
    signature: "0xc87b56dd",
  },
  {
    constant: true,
    inputs: [
      {
        name: "x",
        type: "uint256",
      },
    ],
    name: "toBytes",
    outputs: [
      {
        name: "b",
        type: "bytes",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
    signature: "0x775a8f5e",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610577806100206000396000f3fe60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063775a8f5e14610051578063c87b56dd14610105575b600080fd5b34801561005d57600080fd5b5061008a6004803603602081101561007457600080fd5b81019080803590602001909291905050506101b9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ca5780820151818401526020810190506100af565b50505050905090810190601f1680156100f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011157600080fd5b5061013e6004803603602081101561012857600080fd5b81019080803590602001909291905050506101fd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017e578082015181840152602081019050610163565b50505050905090810190601f1680156101ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060206040519080825280601f01601f1916602001820160405280156101ef5781602001600182028038833980820191505090505b509050816020820152919050565b606080606060405190810160405280602181526020017f68747470733a2f2f6c6566742e67616c6c6572792f76312f6d6574616461746181526020017f2f000000000000000000000000000000000000000000000000000000000000008152509050606061026a84610298565b905061028f61027882610436565b61028184610436565b61046490919063ffffffff16565b92505050919050565b606060008214156102e0576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610431565b600082905060005b60008214151561030e578080600101915050600a8281151561030657fe5b0491506102e8565b6060816040519080825280601f01601f1916602001820160405280156103435781602001600182028038833980820191505090505b50905060006001830390505b600086141515610429576000600a8781151561036757fe5b066030019050610376816101b9565b601f81518110151561038457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001900394508151811015156103e457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8781151561042057fe5b0496505061034f565b819450505050505b919050565b61043e610531565b600060208301905060408051908101604052808451815260200182815250915050919050565b60608082600001518460000151016040519080825280601f01601f1916602001820160405280156104a45781602001600182028038833980820191505090505b50905060006020820190506104c281866020015187600001516104e6565b6104db85600001518201856020015186600001516104e6565b819250505092915050565b5b60208110151561050c57815183526020830192506020820191506020810390506104e7565b60006001826020036101000a0390508019835116818551168181178652505050505050565b60408051908101604052806000815260200160008152509056fea165627a7a72305820edd2692f46d90b2713db9bdab2d6c1023331d393164f7ce45f0446a396a76ac40029";
