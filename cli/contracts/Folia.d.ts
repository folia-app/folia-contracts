/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FoliaInterface extends ethers.utils.Interface {
  functions: {
    "supportsInterface(bytes4)": FunctionFragment;
    "name()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "metadata()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "symbol()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "controller()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "updateMetadata(address)": FunctionFragment;
    "updateController(address)": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "moveEth(address,uint256)": FunctionFragment;
    "moveToken(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "metadata", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moveEth",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moveToken",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveToken", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
}

export class Folia extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FoliaInterface;

  functions: {
    /**
     * implement supportsInterface(bytes4) using a lookup table
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * implement supportsInterface(bytes4) using a lookup table
     */
    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Gets the token name
     * @returns string representing the token name
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the token name
     * @returns string representing the token name
     */
    "name()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Gets the total amount of tokens stored by the contract
     * @returns uint256 representing the total amount of tokens
     */
    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Gets the total amount of tokens stored by the contract
     * @returns uint256 representing the total amount of tokens
     */
    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    metadata(overrides?: CallOverrides): Promise<[string]>;

    "metadata()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator
     * @param _data bytes data to send along with a safe transfer check
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Gets the owner of the specified token ID
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns owner address currently marked as the owner of the given token ID
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Gets the owner of the specified token ID
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns owner address currently marked as the owner of the given token ID
     */
    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Gets the balance of the specified address
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Gets the balance of the specified address
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * @returns the address of the owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * @returns the address of the owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Gets the token symbol
     * @returns string representing the token symbol
     */
    symbol(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the token symbol
     * @returns string representing the token symbol
     */
    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Tells whether an operator is approved by a given owner
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Tells whether an operator is approved by a given owner
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    mint(
      recepient: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      recepient: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMetadata(
      _metadata: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMetadata(address)"(
      _metadata: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addAdmin(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAdmin(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeAdmin(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAdmin(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _infoUrl: string }>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _infoUrl: string }>;

    /**
     * Moves Eth to a certain address for use in the CloversController
     * @param _amount The amount of Eth to be transferred.
     * @param _to The address to receive the Eth.
     */
    moveEth(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Moves Eth to a certain address for use in the CloversController
     * @param _amount The amount of Eth to be transferred.
     * @param _to The address to receive the Eth.
     */
    "moveEth(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Moves Token to a certain address for use in the CloversController
     * @param _amount The amount of Token to be transferred.
     * @param _to The address to receive the Token.
     * @param _token The address of the Token to be transferred.
     */
    moveToken(
      _to: string,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Moves Token to a certain address for use in the CloversController
     * @param _amount The amount of Token to be transferred.
     * @param _to The address to receive the Token.
     * @param _token The address of the Token to be transferred.
     */
    "moveToken(address,uint256,address)"(
      _to: string,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * implement supportsInterface(bytes4) using a lookup table
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * implement supportsInterface(bytes4) using a lookup table
   */
  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Gets the token name
   * @returns string representing the token name
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the token name
   * @returns string representing the token name
   */
  "name()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
   * @param tokenId uint256 ID of the token to query the approval of
   * @returns address currently approved for the given token ID
   */
  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
   * @param tokenId uint256 ID of the token to query the approval of
   * @returns address currently approved for the given token ID
   */
  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
   * @param to address to be approved for the given token ID
   * @param tokenId uint256 ID of the token to be approved
   */
  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
   * @param to address to be approved for the given token ID
   * @param tokenId uint256 ID of the token to be approved
   */
  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Gets the total amount of tokens stored by the contract
   * @returns uint256 representing the total amount of tokens
   */
  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the total amount of tokens stored by the contract
   * @returns uint256 representing the total amount of tokens
   */
  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator
   * @param from current owner of the token
   * @param to address to receive the ownership of the given token ID
   * @param tokenId uint256 ID of the token to be transferred
   */
  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator
   * @param from current owner of the token
   * @param to address to receive the ownership of the given token ID
   * @param tokenId uint256 ID of the token to be transferred
   */
  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Gets the token ID at a given index of the tokens list of the requested owner
   * @param index uint256 representing the index to be accessed of the requested tokens list
   * @param owner address owning the tokens list to be accessed
   * @returns uint256 token ID at the given index of the tokens list owned by the requested address
   */
  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets the token ID at a given index of the tokens list of the requested owner
   * @param index uint256 representing the index to be accessed of the requested tokens list
   * @param owner address owning the tokens list to be accessed
   * @returns uint256 token ID at the given index of the tokens list owned by the requested address
   */
  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  metadata(overrides?: CallOverrides): Promise<string>;

  "metadata()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator
   * @param from current owner of the token
   * @param to address to receive the ownership of the given token ID
   * @param tokenId uint256 ID of the token to be transferred
   */
  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator
   * @param _data bytes data to send along with a safe transfer check
   * @param from current owner of the token
   * @param to address to receive the ownership of the given token ID
   * @param tokenId uint256 ID of the token to be transferred
   */
  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens
   * @param index uint256 representing the index to be accessed of the tokens list
   * @returns uint256 token ID at the given index of the tokens list
   */
  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens
   * @param index uint256 representing the index to be accessed of the tokens list
   * @returns uint256 token ID at the given index of the tokens list
   */
  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets the owner of the specified token ID
   * @param tokenId uint256 ID of the token to query the owner of
   * @returns owner address currently marked as the owner of the given token ID
   */
  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the owner of the specified token ID
   * @param tokenId uint256 ID of the token to query the owner of
   * @returns owner address currently marked as the owner of the given token ID
   */
  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Gets the balance of the specified address
   * @param owner address to query the balance of
   * @returns uint256 representing the amount owned by the passed address
   */
  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the balance of the specified address
   * @param owner address to query the balance of
   * @returns uint256 representing the amount owned by the passed address
   */
  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Allows the current owner to relinquish control of the contract.
   * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Allows the current owner to relinquish control of the contract.
   * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * @returns the address of the owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * @returns the address of the owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * @returns true if `msg.sender` is the owner of the contract.
   */
  isOwner(overrides?: CallOverrides): Promise<boolean>;

  /**
   * @returns true if `msg.sender` is the owner of the contract.
   */
  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Gets the token symbol
   * @returns string representing the token symbol
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the token symbol
   * @returns string representing the token symbol
   */
  "symbol()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf
   * @param approved representing the status of the approval to be set
   * @param to operator address to set the approval
   */
  setApprovalForAll(
    to: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf
   * @param approved representing the status of the approval to be set
   * @param to operator address to set the approval
   */
  "setApprovalForAll(address,bool)"(
    to: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Tells whether an operator is approved by a given owner
   * @param operator operator address which you want to query the approval of
   * @param owner owner address which you want to query the approval of
   * @returns bool whether the given operator is approved by the given owner
   */
  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Tells whether an operator is approved by a given owner
   * @param operator operator address which you want to query the approval of
   * @param owner owner address which you want to query the approval of
   * @returns bool whether the given operator is approved by the given owner
   */
  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  mint(
    recepient: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    recepient: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMetadata(
    _metadata: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMetadata(address)"(
    _metadata: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateController(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateController(address)"(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addAdmin(_admin: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addAdmin(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeAdmin(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAdmin(address)"(
    _admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Moves Eth to a certain address for use in the CloversController
   * @param _amount The amount of Eth to be transferred.
   * @param _to The address to receive the Eth.
   */
  moveEth(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Moves Eth to a certain address for use in the CloversController
   * @param _amount The amount of Eth to be transferred.
   * @param _to The address to receive the Eth.
   */
  "moveEth(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Moves Token to a certain address for use in the CloversController
   * @param _amount The amount of Token to be transferred.
   * @param _to The address to receive the Token.
   * @param _token The address of the Token to be transferred.
   */
  moveToken(
    _to: string,
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Moves Token to a certain address for use in the CloversController
   * @param _amount The amount of Token to be transferred.
   * @param _to The address to receive the Token.
   * @param _token The address of the Token to be transferred.
   */
  "moveToken(address,uint256,address)"(
    _to: string,
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * implement supportsInterface(bytes4) using a lookup table
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * implement supportsInterface(bytes4) using a lookup table
     */
    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Gets the token name
     * @returns string representing the token name
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the token name
     * @returns string representing the token name
     */
    "name()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets the total amount of tokens stored by the contract
     * @returns uint256 representing the total amount of tokens
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the total amount of tokens stored by the contract
     * @returns uint256 representing the total amount of tokens
     */
    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadata(overrides?: CallOverrides): Promise<string>;

    "metadata()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator
     * @param _data bytes data to send along with a safe transfer check
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the owner of the specified token ID
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns owner address currently marked as the owner of the given token ID
     */
    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the owner of the specified token ID
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns owner address currently marked as the owner of the given token ID
     */
    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Gets the balance of the specified address
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the balance of the specified address
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * @returns the address of the owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * @returns the address of the owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    isOwner(overrides?: CallOverrides): Promise<boolean>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Gets the token symbol
     * @returns string representing the token symbol
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the token symbol
     * @returns string representing the token symbol
     */
    "symbol()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Tells whether an operator is approved by a given owner
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Tells whether an operator is approved by a given owner
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    mint(
      recepient: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      recepient: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMetadata(_metadata: string, overrides?: CallOverrides): Promise<void>;

    "updateMetadata(address)"(
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    "addAdmin(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    "removeAdmin(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Moves Eth to a certain address for use in the CloversController
     * @param _amount The amount of Eth to be transferred.
     * @param _to The address to receive the Eth.
     */
    moveEth(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Moves Eth to a certain address for use in the CloversController
     * @param _amount The amount of Eth to be transferred.
     * @param _to The address to receive the Eth.
     */
    "moveEth(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Moves Token to a certain address for use in the CloversController
     * @param _amount The amount of Token to be transferred.
     * @param _to The address to receive the Token.
     * @param _token The address of the Token to be transferred.
     */
    moveToken(
      _to: string,
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Moves Token to a certain address for use in the CloversController
     * @param _amount The amount of Token to be transferred.
     * @param _to The address to receive the Token.
     * @param _token The address of the Token to be transferred.
     */
    "moveToken(address,uint256,address)"(
      _to: string,
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;
  };

  estimateGas: {
    /**
     * implement supportsInterface(bytes4) using a lookup table
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * implement supportsInterface(bytes4) using a lookup table
     */
    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the token name
     * @returns string representing the token name
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the token name
     * @returns string representing the token name
     */
    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Gets the total amount of tokens stored by the contract
     * @returns uint256 representing the total amount of tokens
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the total amount of tokens stored by the contract
     * @returns uint256 representing the total amount of tokens
     */
    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadata(overrides?: CallOverrides): Promise<BigNumber>;

    "metadata()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator
     * @param _data bytes data to send along with a safe transfer check
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the owner of the specified token ID
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns owner address currently marked as the owner of the given token ID
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the owner of the specified token ID
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns owner address currently marked as the owner of the given token ID
     */
    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the balance of the specified address
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the balance of the specified address
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * @returns the address of the owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @returns the address of the owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the token symbol
     * @returns string representing the token symbol
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the token symbol
     * @returns string representing the token symbol
     */
    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Tells whether an operator is approved by a given owner
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Tells whether an operator is approved by a given owner
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      recepient: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      recepient: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burn(tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMetadata(
      _metadata: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMetadata(address)"(
      _metadata: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateController(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addAdmin(_admin: string, overrides?: Overrides): Promise<BigNumber>;

    "addAdmin(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeAdmin(_admin: string, overrides?: Overrides): Promise<BigNumber>;

    "removeAdmin(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Moves Eth to a certain address for use in the CloversController
     * @param _amount The amount of Eth to be transferred.
     * @param _to The address to receive the Eth.
     */
    moveEth(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Moves Eth to a certain address for use in the CloversController
     * @param _amount The amount of Eth to be transferred.
     * @param _to The address to receive the Eth.
     */
    "moveEth(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Moves Token to a certain address for use in the CloversController
     * @param _amount The amount of Token to be transferred.
     * @param _to The address to receive the Token.
     * @param _token The address of the Token to be transferred.
     */
    moveToken(
      _to: string,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Moves Token to a certain address for use in the CloversController
     * @param _amount The amount of Token to be transferred.
     * @param _to The address to receive the Token.
     * @param _token The address of the Token to be transferred.
     */
    "moveToken(address,uint256,address)"(
      _to: string,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * implement supportsInterface(bytes4) using a lookup table
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * implement supportsInterface(bytes4) using a lookup table
     */
    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the token name
     * @returns string representing the token name
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the token name
     * @returns string representing the token name
     */
    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the total amount of tokens stored by the contract
     * @returns uint256 representing the total amount of tokens
     */
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the total amount of tokens stored by the contract
     * @returns uint256 representing the total amount of tokens
     */
    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "metadata()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator
     * @param _data bytes data to send along with a safe transfer check
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the owner of the specified token ID
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns owner address currently marked as the owner of the given token ID
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the owner of the specified token ID
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns owner address currently marked as the owner of the given token ID
     */
    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the balance of the specified address
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the balance of the specified address
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to relinquish control of the contract.
     * Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * @returns the address of the owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @returns the address of the owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @returns true if `msg.sender` is the owner of the contract.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the token symbol
     * @returns string representing the token symbol
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the token symbol
     * @returns string representing the token symbol
     */
    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Tells whether an operator is approved by a given owner
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Tells whether an operator is approved by a given owner
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      recepient: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      recepient: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMetadata(
      _metadata: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMetadata(address)"(
      _metadata: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addAdmin(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAdmin(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAdmin(address)"(
      _admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Moves Eth to a certain address for use in the CloversController
     * @param _amount The amount of Eth to be transferred.
     * @param _to The address to receive the Eth.
     */
    moveEth(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Moves Eth to a certain address for use in the CloversController
     * @param _amount The amount of Eth to be transferred.
     * @param _to The address to receive the Eth.
     */
    "moveEth(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Moves Token to a certain address for use in the CloversController
     * @param _amount The amount of Token to be transferred.
     * @param _to The address to receive the Token.
     * @param _token The address of the Token to be transferred.
     */
    moveToken(
      _to: string,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Moves Token to a certain address for use in the CloversController
     * @param _amount The amount of Token to be transferred.
     * @param _to The address to receive the Token.
     * @param _token The address of the Token to be transferred.
     */
    "moveToken(address,uint256,address)"(
      _to: string,
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
